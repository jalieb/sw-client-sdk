<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Sales-Channel API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.18
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product extends Resource 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'version_id' => 'string',
'parent_id' => 'string',
'parent_version_id' => 'string',
'child_count' => 'int',
'auto_increment' => 'int',
'active' => 'bool',
'stock' => 'int',
'available_stock' => 'int',
'available' => 'bool',
'display_group' => 'string',
'manufacturer_id' => 'string',
'product_manufacturer_version_id' => 'string',
'unit_id' => 'string',
'tax_id' => 'string',
'cover_id' => 'string',
'product_media_version_id' => 'string',
'price' => 'object',
'manufacturer_number' => 'string',
'ean' => 'string',
'product_number' => 'string',
'is_closeout' => 'bool',
'purchase_steps' => 'int',
'max_purchase' => 'int',
'min_purchase' => 'int',
'purchase_unit' => 'float',
'reference_unit' => 'float',
'shipping_free' => 'bool',
'purchase_price' => 'float',
'mark_as_topseller' => 'bool',
'weight' => 'float',
'width' => 'float',
'height' => 'float',
'length' => 'float',
'release_date' => '\DateTime',
'category_tree' => 'string[]',
'property_ids' => 'string[]',
'option_ids' => 'string[]',
'tag_ids' => 'string[]',
'listing_prices' => 'object',
'rating_average' => 'float',
'delivery_time_id' => 'string',
'restock_time' => 'int',
'meta_description' => 'string',
'name' => 'string',
'keywords' => 'string',
'description' => 'string',
'meta_title' => 'string',
'pack_unit' => 'string',
'custom_fields' => 'object',
'calculated_price' => 'object',
'calculated_listing_price' => 'object',
'calculated_prices' => 'object[]',
'calculated_max_purchase' => 'int',
'is_new' => 'bool',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'translated' => 'object',
'relationships' => '\Swagger\Client\Model\ProductRelationships'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
'version_id' => 'uuid',
'parent_id' => 'uuid',
'parent_version_id' => 'uuid',
'child_count' => 'int64',
'auto_increment' => 'int64',
'active' => null,
'stock' => 'int64',
'available_stock' => 'int64',
'available' => null,
'display_group' => null,
'manufacturer_id' => 'uuid',
'product_manufacturer_version_id' => 'uuid',
'unit_id' => 'uuid',
'tax_id' => 'uuid',
'cover_id' => 'uuid',
'product_media_version_id' => 'uuid',
'price' => null,
'manufacturer_number' => null,
'ean' => null,
'product_number' => null,
'is_closeout' => null,
'purchase_steps' => 'int64',
'max_purchase' => 'int64',
'min_purchase' => 'int64',
'purchase_unit' => 'float',
'reference_unit' => 'float',
'shipping_free' => null,
'purchase_price' => 'float',
'mark_as_topseller' => null,
'weight' => 'float',
'width' => 'float',
'height' => 'float',
'length' => 'float',
'release_date' => 'date-time',
'category_tree' => 'uuid',
'property_ids' => 'uuid',
'option_ids' => 'uuid',
'tag_ids' => 'uuid',
'listing_prices' => null,
'rating_average' => 'float',
'delivery_time_id' => 'uuid',
'restock_time' => 'int64',
'meta_description' => null,
'name' => null,
'keywords' => null,
'description' => null,
'meta_title' => null,
'pack_unit' => null,
'custom_fields' => null,
'calculated_price' => null,
'calculated_listing_price' => null,
'calculated_prices' => null,
'calculated_max_purchase' => 'int64',
'is_new' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'translated' => null,
'relationships' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'version_id' => 'versionId',
'parent_id' => 'parentId',
'parent_version_id' => 'parentVersionId',
'child_count' => 'childCount',
'auto_increment' => 'autoIncrement',
'active' => 'active',
'stock' => 'stock',
'available_stock' => 'availableStock',
'available' => 'available',
'display_group' => 'displayGroup',
'manufacturer_id' => 'manufacturerId',
'product_manufacturer_version_id' => 'productManufacturerVersionId',
'unit_id' => 'unitId',
'tax_id' => 'taxId',
'cover_id' => 'coverId',
'product_media_version_id' => 'productMediaVersionId',
'price' => 'price',
'manufacturer_number' => 'manufacturerNumber',
'ean' => 'ean',
'product_number' => 'productNumber',
'is_closeout' => 'isCloseout',
'purchase_steps' => 'purchaseSteps',
'max_purchase' => 'maxPurchase',
'min_purchase' => 'minPurchase',
'purchase_unit' => 'purchaseUnit',
'reference_unit' => 'referenceUnit',
'shipping_free' => 'shippingFree',
'purchase_price' => 'purchasePrice',
'mark_as_topseller' => 'markAsTopseller',
'weight' => 'weight',
'width' => 'width',
'height' => 'height',
'length' => 'length',
'release_date' => 'releaseDate',
'category_tree' => 'categoryTree',
'property_ids' => 'propertyIds',
'option_ids' => 'optionIds',
'tag_ids' => 'tagIds',
'listing_prices' => 'listingPrices',
'rating_average' => 'ratingAverage',
'delivery_time_id' => 'deliveryTimeId',
'restock_time' => 'restockTime',
'meta_description' => 'metaDescription',
'name' => 'name',
'keywords' => 'keywords',
'description' => 'description',
'meta_title' => 'metaTitle',
'pack_unit' => 'packUnit',
'custom_fields' => 'customFields',
'calculated_price' => 'calculatedPrice',
'calculated_listing_price' => 'calculatedListingPrice',
'calculated_prices' => 'calculatedPrices',
'calculated_max_purchase' => 'calculatedMaxPurchase',
'is_new' => 'isNew',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'translated' => 'translated',
'relationships' => 'relationships'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'version_id' => 'setVersionId',
'parent_id' => 'setParentId',
'parent_version_id' => 'setParentVersionId',
'child_count' => 'setChildCount',
'auto_increment' => 'setAutoIncrement',
'active' => 'setActive',
'stock' => 'setStock',
'available_stock' => 'setAvailableStock',
'available' => 'setAvailable',
'display_group' => 'setDisplayGroup',
'manufacturer_id' => 'setManufacturerId',
'product_manufacturer_version_id' => 'setProductManufacturerVersionId',
'unit_id' => 'setUnitId',
'tax_id' => 'setTaxId',
'cover_id' => 'setCoverId',
'product_media_version_id' => 'setProductMediaVersionId',
'price' => 'setPrice',
'manufacturer_number' => 'setManufacturerNumber',
'ean' => 'setEan',
'product_number' => 'setProductNumber',
'is_closeout' => 'setIsCloseout',
'purchase_steps' => 'setPurchaseSteps',
'max_purchase' => 'setMaxPurchase',
'min_purchase' => 'setMinPurchase',
'purchase_unit' => 'setPurchaseUnit',
'reference_unit' => 'setReferenceUnit',
'shipping_free' => 'setShippingFree',
'purchase_price' => 'setPurchasePrice',
'mark_as_topseller' => 'setMarkAsTopseller',
'weight' => 'setWeight',
'width' => 'setWidth',
'height' => 'setHeight',
'length' => 'setLength',
'release_date' => 'setReleaseDate',
'category_tree' => 'setCategoryTree',
'property_ids' => 'setPropertyIds',
'option_ids' => 'setOptionIds',
'tag_ids' => 'setTagIds',
'listing_prices' => 'setListingPrices',
'rating_average' => 'setRatingAverage',
'delivery_time_id' => 'setDeliveryTimeId',
'restock_time' => 'setRestockTime',
'meta_description' => 'setMetaDescription',
'name' => 'setName',
'keywords' => 'setKeywords',
'description' => 'setDescription',
'meta_title' => 'setMetaTitle',
'pack_unit' => 'setPackUnit',
'custom_fields' => 'setCustomFields',
'calculated_price' => 'setCalculatedPrice',
'calculated_listing_price' => 'setCalculatedListingPrice',
'calculated_prices' => 'setCalculatedPrices',
'calculated_max_purchase' => 'setCalculatedMaxPurchase',
'is_new' => 'setIsNew',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'translated' => 'setTranslated',
'relationships' => 'setRelationships'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'version_id' => 'getVersionId',
'parent_id' => 'getParentId',
'parent_version_id' => 'getParentVersionId',
'child_count' => 'getChildCount',
'auto_increment' => 'getAutoIncrement',
'active' => 'getActive',
'stock' => 'getStock',
'available_stock' => 'getAvailableStock',
'available' => 'getAvailable',
'display_group' => 'getDisplayGroup',
'manufacturer_id' => 'getManufacturerId',
'product_manufacturer_version_id' => 'getProductManufacturerVersionId',
'unit_id' => 'getUnitId',
'tax_id' => 'getTaxId',
'cover_id' => 'getCoverId',
'product_media_version_id' => 'getProductMediaVersionId',
'price' => 'getPrice',
'manufacturer_number' => 'getManufacturerNumber',
'ean' => 'getEan',
'product_number' => 'getProductNumber',
'is_closeout' => 'getIsCloseout',
'purchase_steps' => 'getPurchaseSteps',
'max_purchase' => 'getMaxPurchase',
'min_purchase' => 'getMinPurchase',
'purchase_unit' => 'getPurchaseUnit',
'reference_unit' => 'getReferenceUnit',
'shipping_free' => 'getShippingFree',
'purchase_price' => 'getPurchasePrice',
'mark_as_topseller' => 'getMarkAsTopseller',
'weight' => 'getWeight',
'width' => 'getWidth',
'height' => 'getHeight',
'length' => 'getLength',
'release_date' => 'getReleaseDate',
'category_tree' => 'getCategoryTree',
'property_ids' => 'getPropertyIds',
'option_ids' => 'getOptionIds',
'tag_ids' => 'getTagIds',
'listing_prices' => 'getListingPrices',
'rating_average' => 'getRatingAverage',
'delivery_time_id' => 'getDeliveryTimeId',
'restock_time' => 'getRestockTime',
'meta_description' => 'getMetaDescription',
'name' => 'getName',
'keywords' => 'getKeywords',
'description' => 'getDescription',
'meta_title' => 'getMetaTitle',
'pack_unit' => 'getPackUnit',
'custom_fields' => 'getCustomFields',
'calculated_price' => 'getCalculatedPrice',
'calculated_listing_price' => 'getCalculatedListingPrice',
'calculated_prices' => 'getCalculatedPrices',
'calculated_max_purchase' => 'getCalculatedMaxPurchase',
'is_new' => 'getIsNew',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'translated' => 'getTranslated',
'relationships' => 'getRelationships'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['version_id'] = isset($data['version_id']) ? $data['version_id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['parent_version_id'] = isset($data['parent_version_id']) ? $data['parent_version_id'] : null;
        $this->container['child_count'] = isset($data['child_count']) ? $data['child_count'] : null;
        $this->container['auto_increment'] = isset($data['auto_increment']) ? $data['auto_increment'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['stock'] = isset($data['stock']) ? $data['stock'] : null;
        $this->container['available_stock'] = isset($data['available_stock']) ? $data['available_stock'] : null;
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['display_group'] = isset($data['display_group']) ? $data['display_group'] : null;
        $this->container['manufacturer_id'] = isset($data['manufacturer_id']) ? $data['manufacturer_id'] : null;
        $this->container['product_manufacturer_version_id'] = isset($data['product_manufacturer_version_id']) ? $data['product_manufacturer_version_id'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['tax_id'] = isset($data['tax_id']) ? $data['tax_id'] : null;
        $this->container['cover_id'] = isset($data['cover_id']) ? $data['cover_id'] : null;
        $this->container['product_media_version_id'] = isset($data['product_media_version_id']) ? $data['product_media_version_id'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['manufacturer_number'] = isset($data['manufacturer_number']) ? $data['manufacturer_number'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['product_number'] = isset($data['product_number']) ? $data['product_number'] : null;
        $this->container['is_closeout'] = isset($data['is_closeout']) ? $data['is_closeout'] : null;
        $this->container['purchase_steps'] = isset($data['purchase_steps']) ? $data['purchase_steps'] : null;
        $this->container['max_purchase'] = isset($data['max_purchase']) ? $data['max_purchase'] : null;
        $this->container['min_purchase'] = isset($data['min_purchase']) ? $data['min_purchase'] : null;
        $this->container['purchase_unit'] = isset($data['purchase_unit']) ? $data['purchase_unit'] : null;
        $this->container['reference_unit'] = isset($data['reference_unit']) ? $data['reference_unit'] : null;
        $this->container['shipping_free'] = isset($data['shipping_free']) ? $data['shipping_free'] : null;
        $this->container['purchase_price'] = isset($data['purchase_price']) ? $data['purchase_price'] : null;
        $this->container['mark_as_topseller'] = isset($data['mark_as_topseller']) ? $data['mark_as_topseller'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['category_tree'] = isset($data['category_tree']) ? $data['category_tree'] : null;
        $this->container['property_ids'] = isset($data['property_ids']) ? $data['property_ids'] : null;
        $this->container['option_ids'] = isset($data['option_ids']) ? $data['option_ids'] : null;
        $this->container['tag_ids'] = isset($data['tag_ids']) ? $data['tag_ids'] : null;
        $this->container['listing_prices'] = isset($data['listing_prices']) ? $data['listing_prices'] : null;
        $this->container['rating_average'] = isset($data['rating_average']) ? $data['rating_average'] : null;
        $this->container['delivery_time_id'] = isset($data['delivery_time_id']) ? $data['delivery_time_id'] : null;
        $this->container['restock_time'] = isset($data['restock_time']) ? $data['restock_time'] : null;
        $this->container['meta_description'] = isset($data['meta_description']) ? $data['meta_description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['meta_title'] = isset($data['meta_title']) ? $data['meta_title'] : null;
        $this->container['pack_unit'] = isset($data['pack_unit']) ? $data['pack_unit'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['calculated_price'] = isset($data['calculated_price']) ? $data['calculated_price'] : null;
        $this->container['calculated_listing_price'] = isset($data['calculated_listing_price']) ? $data['calculated_listing_price'] : null;
        $this->container['calculated_prices'] = isset($data['calculated_prices']) ? $data['calculated_prices'] : null;
        $this->container['calculated_max_purchase'] = isset($data['calculated_max_purchase']) ? $data['calculated_max_purchase'] : null;
        $this->container['is_new'] = isset($data['is_new']) ? $data['is_new'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['translated'] = isset($data['translated']) ? $data['translated'] : null;
        $this->container['relationships'] = isset($data['relationships']) ? $data['relationships'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['stock'] === null) {
            $invalidProperties[] = "'stock' can't be null";
        }
        if ($this->container['tax_id'] === null) {
            $invalidProperties[] = "'tax_id' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['product_number'] === null) {
            $invalidProperties[] = "'product_number' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version_id
     *
     * @return string
     */
    public function getVersionId()
    {
        return $this->container['version_id'];
    }

    /**
     * Sets version_id
     *
     * @param string $version_id version_id
     *
     * @return $this
     */
    public function setVersionId($version_id)
    {
        $this->container['version_id'] = $version_id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets parent_version_id
     *
     * @return string
     */
    public function getParentVersionId()
    {
        return $this->container['parent_version_id'];
    }

    /**
     * Sets parent_version_id
     *
     * @param string $parent_version_id parent_version_id
     *
     * @return $this
     */
    public function setParentVersionId($parent_version_id)
    {
        $this->container['parent_version_id'] = $parent_version_id;

        return $this;
    }

    /**
     * Gets child_count
     *
     * @return int
     */
    public function getChildCount()
    {
        return $this->container['child_count'];
    }

    /**
     * Sets child_count
     *
     * @param int $child_count child_count
     *
     * @return $this
     */
    public function setChildCount($child_count)
    {
        $this->container['child_count'] = $child_count;

        return $this;
    }

    /**
     * Gets auto_increment
     *
     * @return int
     */
    public function getAutoIncrement()
    {
        return $this->container['auto_increment'];
    }

    /**
     * Sets auto_increment
     *
     * @param int $auto_increment auto_increment
     *
     * @return $this
     */
    public function setAutoIncrement($auto_increment)
    {
        $this->container['auto_increment'] = $auto_increment;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return int
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param int $stock stock
     *
     * @return $this
     */
    public function setStock($stock)
    {
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets available_stock
     *
     * @return int
     */
    public function getAvailableStock()
    {
        return $this->container['available_stock'];
    }

    /**
     * Sets available_stock
     *
     * @param int $available_stock available_stock
     *
     * @return $this
     */
    public function setAvailableStock($available_stock)
    {
        $this->container['available_stock'] = $available_stock;

        return $this;
    }

    /**
     * Gets available
     *
     * @return bool
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param bool $available available
     *
     * @return $this
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets display_group
     *
     * @return string
     */
    public function getDisplayGroup()
    {
        return $this->container['display_group'];
    }

    /**
     * Sets display_group
     *
     * @param string $display_group display_group
     *
     * @return $this
     */
    public function setDisplayGroup($display_group)
    {
        $this->container['display_group'] = $display_group;

        return $this;
    }

    /**
     * Gets manufacturer_id
     *
     * @return string
     */
    public function getManufacturerId()
    {
        return $this->container['manufacturer_id'];
    }

    /**
     * Sets manufacturer_id
     *
     * @param string $manufacturer_id manufacturer_id
     *
     * @return $this
     */
    public function setManufacturerId($manufacturer_id)
    {
        $this->container['manufacturer_id'] = $manufacturer_id;

        return $this;
    }

    /**
     * Gets product_manufacturer_version_id
     *
     * @return string
     */
    public function getProductManufacturerVersionId()
    {
        return $this->container['product_manufacturer_version_id'];
    }

    /**
     * Sets product_manufacturer_version_id
     *
     * @param string $product_manufacturer_version_id product_manufacturer_version_id
     *
     * @return $this
     */
    public function setProductManufacturerVersionId($product_manufacturer_version_id)
    {
        $this->container['product_manufacturer_version_id'] = $product_manufacturer_version_id;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string $unit_id unit_id
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string $tax_id tax_id
     *
     * @return $this
     */
    public function setTaxId($tax_id)
    {
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets cover_id
     *
     * @return string
     */
    public function getCoverId()
    {
        return $this->container['cover_id'];
    }

    /**
     * Sets cover_id
     *
     * @param string $cover_id cover_id
     *
     * @return $this
     */
    public function setCoverId($cover_id)
    {
        $this->container['cover_id'] = $cover_id;

        return $this;
    }

    /**
     * Gets product_media_version_id
     *
     * @return string
     */
    public function getProductMediaVersionId()
    {
        return $this->container['product_media_version_id'];
    }

    /**
     * Sets product_media_version_id
     *
     * @param string $product_media_version_id product_media_version_id
     *
     * @return $this
     */
    public function setProductMediaVersionId($product_media_version_id)
    {
        $this->container['product_media_version_id'] = $product_media_version_id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return object
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param object $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets manufacturer_number
     *
     * @return string
     */
    public function getManufacturerNumber()
    {
        return $this->container['manufacturer_number'];
    }

    /**
     * Sets manufacturer_number
     *
     * @param string $manufacturer_number manufacturer_number
     *
     * @return $this
     */
    public function setManufacturerNumber($manufacturer_number)
    {
        $this->container['manufacturer_number'] = $manufacturer_number;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean ean
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets product_number
     *
     * @return string
     */
    public function getProductNumber()
    {
        return $this->container['product_number'];
    }

    /**
     * Sets product_number
     *
     * @param string $product_number product_number
     *
     * @return $this
     */
    public function setProductNumber($product_number)
    {
        $this->container['product_number'] = $product_number;

        return $this;
    }

    /**
     * Gets is_closeout
     *
     * @return bool
     */
    public function getIsCloseout()
    {
        return $this->container['is_closeout'];
    }

    /**
     * Sets is_closeout
     *
     * @param bool $is_closeout is_closeout
     *
     * @return $this
     */
    public function setIsCloseout($is_closeout)
    {
        $this->container['is_closeout'] = $is_closeout;

        return $this;
    }

    /**
     * Gets purchase_steps
     *
     * @return int
     */
    public function getPurchaseSteps()
    {
        return $this->container['purchase_steps'];
    }

    /**
     * Sets purchase_steps
     *
     * @param int $purchase_steps purchase_steps
     *
     * @return $this
     */
    public function setPurchaseSteps($purchase_steps)
    {
        $this->container['purchase_steps'] = $purchase_steps;

        return $this;
    }

    /**
     * Gets max_purchase
     *
     * @return int
     */
    public function getMaxPurchase()
    {
        return $this->container['max_purchase'];
    }

    /**
     * Sets max_purchase
     *
     * @param int $max_purchase max_purchase
     *
     * @return $this
     */
    public function setMaxPurchase($max_purchase)
    {
        $this->container['max_purchase'] = $max_purchase;

        return $this;
    }

    /**
     * Gets min_purchase
     *
     * @return int
     */
    public function getMinPurchase()
    {
        return $this->container['min_purchase'];
    }

    /**
     * Sets min_purchase
     *
     * @param int $min_purchase min_purchase
     *
     * @return $this
     */
    public function setMinPurchase($min_purchase)
    {
        $this->container['min_purchase'] = $min_purchase;

        return $this;
    }

    /**
     * Gets purchase_unit
     *
     * @return float
     */
    public function getPurchaseUnit()
    {
        return $this->container['purchase_unit'];
    }

    /**
     * Sets purchase_unit
     *
     * @param float $purchase_unit purchase_unit
     *
     * @return $this
     */
    public function setPurchaseUnit($purchase_unit)
    {
        $this->container['purchase_unit'] = $purchase_unit;

        return $this;
    }

    /**
     * Gets reference_unit
     *
     * @return float
     */
    public function getReferenceUnit()
    {
        return $this->container['reference_unit'];
    }

    /**
     * Sets reference_unit
     *
     * @param float $reference_unit reference_unit
     *
     * @return $this
     */
    public function setReferenceUnit($reference_unit)
    {
        $this->container['reference_unit'] = $reference_unit;

        return $this;
    }

    /**
     * Gets shipping_free
     *
     * @return bool
     */
    public function getShippingFree()
    {
        return $this->container['shipping_free'];
    }

    /**
     * Sets shipping_free
     *
     * @param bool $shipping_free shipping_free
     *
     * @return $this
     */
    public function setShippingFree($shipping_free)
    {
        $this->container['shipping_free'] = $shipping_free;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return float
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param float $purchase_price purchase_price
     *
     * @return $this
     */
    public function setPurchasePrice($purchase_price)
    {
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets mark_as_topseller
     *
     * @return bool
     */
    public function getMarkAsTopseller()
    {
        return $this->container['mark_as_topseller'];
    }

    /**
     * Sets mark_as_topseller
     *
     * @param bool $mark_as_topseller mark_as_topseller
     *
     * @return $this
     */
    public function setMarkAsTopseller($mark_as_topseller)
    {
        $this->container['mark_as_topseller'] = $mark_as_topseller;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return \DateTime
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param \DateTime $release_date release_date
     *
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets category_tree
     *
     * @return string[]
     */
    public function getCategoryTree()
    {
        return $this->container['category_tree'];
    }

    /**
     * Sets category_tree
     *
     * @param string[] $category_tree category_tree
     *
     * @return $this
     */
    public function setCategoryTree($category_tree)
    {
        $this->container['category_tree'] = $category_tree;

        return $this;
    }

    /**
     * Gets property_ids
     *
     * @return string[]
     */
    public function getPropertyIds()
    {
        return $this->container['property_ids'];
    }

    /**
     * Sets property_ids
     *
     * @param string[] $property_ids property_ids
     *
     * @return $this
     */
    public function setPropertyIds($property_ids)
    {
        $this->container['property_ids'] = $property_ids;

        return $this;
    }

    /**
     * Gets option_ids
     *
     * @return string[]
     */
    public function getOptionIds()
    {
        return $this->container['option_ids'];
    }

    /**
     * Sets option_ids
     *
     * @param string[] $option_ids option_ids
     *
     * @return $this
     */
    public function setOptionIds($option_ids)
    {
        $this->container['option_ids'] = $option_ids;

        return $this;
    }

    /**
     * Gets tag_ids
     *
     * @return string[]
     */
    public function getTagIds()
    {
        return $this->container['tag_ids'];
    }

    /**
     * Sets tag_ids
     *
     * @param string[] $tag_ids tag_ids
     *
     * @return $this
     */
    public function setTagIds($tag_ids)
    {
        $this->container['tag_ids'] = $tag_ids;

        return $this;
    }

    /**
     * Gets listing_prices
     *
     * @return object
     */
    public function getListingPrices()
    {
        return $this->container['listing_prices'];
    }

    /**
     * Sets listing_prices
     *
     * @param object $listing_prices listing_prices
     *
     * @return $this
     */
    public function setListingPrices($listing_prices)
    {
        $this->container['listing_prices'] = $listing_prices;

        return $this;
    }

    /**
     * Gets rating_average
     *
     * @return float
     */
    public function getRatingAverage()
    {
        return $this->container['rating_average'];
    }

    /**
     * Sets rating_average
     *
     * @param float $rating_average rating_average
     *
     * @return $this
     */
    public function setRatingAverage($rating_average)
    {
        $this->container['rating_average'] = $rating_average;

        return $this;
    }

    /**
     * Gets delivery_time_id
     *
     * @return string
     */
    public function getDeliveryTimeId()
    {
        return $this->container['delivery_time_id'];
    }

    /**
     * Sets delivery_time_id
     *
     * @param string $delivery_time_id delivery_time_id
     *
     * @return $this
     */
    public function setDeliveryTimeId($delivery_time_id)
    {
        $this->container['delivery_time_id'] = $delivery_time_id;

        return $this;
    }

    /**
     * Gets restock_time
     *
     * @return int
     */
    public function getRestockTime()
    {
        return $this->container['restock_time'];
    }

    /**
     * Sets restock_time
     *
     * @param int $restock_time restock_time
     *
     * @return $this
     */
    public function setRestockTime($restock_time)
    {
        $this->container['restock_time'] = $restock_time;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string
     */
    public function getMetaDescription()
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string $meta_description meta_description
     *
     * @return $this
     */
    public function setMetaDescription($meta_description)
    {
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string $keywords keywords
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets meta_title
     *
     * @return string
     */
    public function getMetaTitle()
    {
        return $this->container['meta_title'];
    }

    /**
     * Sets meta_title
     *
     * @param string $meta_title meta_title
     *
     * @return $this
     */
    public function setMetaTitle($meta_title)
    {
        $this->container['meta_title'] = $meta_title;

        return $this;
    }

    /**
     * Gets pack_unit
     *
     * @return string
     */
    public function getPackUnit()
    {
        return $this->container['pack_unit'];
    }

    /**
     * Sets pack_unit
     *
     * @param string $pack_unit pack_unit
     *
     * @return $this
     */
    public function setPackUnit($pack_unit)
    {
        $this->container['pack_unit'] = $pack_unit;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets calculated_price
     *
     * @return object
     */
    public function getCalculatedPrice()
    {
        return $this->container['calculated_price'];
    }

    /**
     * Sets calculated_price
     *
     * @param object $calculated_price calculated_price
     *
     * @return $this
     */
    public function setCalculatedPrice($calculated_price)
    {
        $this->container['calculated_price'] = $calculated_price;

        return $this;
    }

    /**
     * Gets calculated_listing_price
     *
     * @return object
     */
    public function getCalculatedListingPrice()
    {
        return $this->container['calculated_listing_price'];
    }

    /**
     * Sets calculated_listing_price
     *
     * @param object $calculated_listing_price calculated_listing_price
     *
     * @return $this
     */
    public function setCalculatedListingPrice($calculated_listing_price)
    {
        $this->container['calculated_listing_price'] = $calculated_listing_price;

        return $this;
    }

    /**
     * Gets calculated_prices
     *
     * @return object[]
     */
    public function getCalculatedPrices()
    {
        return $this->container['calculated_prices'];
    }

    /**
     * Sets calculated_prices
     *
     * @param object[] $calculated_prices calculated_prices
     *
     * @return $this
     */
    public function setCalculatedPrices($calculated_prices)
    {
        $this->container['calculated_prices'] = $calculated_prices;

        return $this;
    }

    /**
     * Gets calculated_max_purchase
     *
     * @return int
     */
    public function getCalculatedMaxPurchase()
    {
        return $this->container['calculated_max_purchase'];
    }

    /**
     * Sets calculated_max_purchase
     *
     * @param int $calculated_max_purchase calculated_max_purchase
     *
     * @return $this
     */
    public function setCalculatedMaxPurchase($calculated_max_purchase)
    {
        $this->container['calculated_max_purchase'] = $calculated_max_purchase;

        return $this;
    }

    /**
     * Gets is_new
     *
     * @return bool
     */
    public function getIsNew()
    {
        return $this->container['is_new'];
    }

    /**
     * Sets is_new
     *
     * @param bool $is_new is_new
     *
     * @return $this
     */
    public function setIsNew($is_new)
    {
        $this->container['is_new'] = $is_new;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets translated
     *
     * @return object
     */
    public function getTranslated()
    {
        return $this->container['translated'];
    }

    /**
     * Sets translated
     *
     * @param object $translated translated
     *
     * @return $this
     */
    public function setTranslated($translated)
    {
        $this->container['translated'] = $translated;

        return $this;
    }

    /**
     * Gets relationships
     *
     * @return \Swagger\Client\Model\ProductRelationships
     */
    public function getRelationships()
    {
        return $this->container['relationships'];
    }

    /**
     * Sets relationships
     *
     * @param \Swagger\Client\Model\ProductRelationships $relationships relationships
     *
     * @return $this
     */
    public function setRelationships($relationships)
    {
        $this->container['relationships'] = $relationships;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
